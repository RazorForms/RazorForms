@page
@model ExampleProject.Pages.Shared.ExampleModel

@{
	ViewData["Title"] = "Bulma example form";
	const string rowClass = "column is-half";
	const string buttonRowClass = "column is-third";
}

<h1 class="is-size-1 has-text-center">@ViewData["Title"]</h1>

<p>
	This page shows how to use RazorForms tag helpers in their default configuration. By default, RazorForms will use the name of the property if no other naming scheme is supplied. In the form below, you will see that the form labels aren't very user-friendly in most cases (the "age" field is fine, but most other fields are just the PascalCase property name, which most users won't understand).
</p>

<p>
	There are two ways to make the label more user-friendly: you can either <a asp-area="" asp-page="/Bootstrap/AttributeDisplayExamples">use the [Display] attribute</a> or <a asp-area="" asp-page="/Bootstrap/HtmlExamples">pass HTML directly to the &lt;label&gt; element</a>
</p>

<form asp-page="/"
      method="post">
	<div class="columns is-multiline">
		<div class="column is-full">
			<h2 class="is-size-3">&lt;text-input&gt;</h2>
		</div>
		<div class="@rowClass">
			<text-input asp-for="FirstName"
			            disabled/>
			<p>
				You can pass arbitrary attributes down to the &lt;input&gt; by adding them to the &lt;text-input&gt; tag helper. In this case, the <code>disabled</code> attribute was passed to the &lt;text-input&gt; tag helper, so the  underlying &lt;input&gt; is also disabled.
			</p>
		</div>
		<div class="@rowClass">
			<text-input asp-for="LastName"
			            class="fake-class"/>
			<p>
				The only attribute not passed to the underlying &lt;input&gt; is the <code>class</code> attribute. Classes are passed to the &lt;div&gt; wrapping the whole component output. In this case, the CSS class <code>fake-class</code> has been applied to the &lt;div&gt; wrapping the component.
			</p>
		</div>
		<div class="@rowClass">
			<text-input asp-for="Password"/>
			<p>
				Data types like passwords are automatically detected if the model property is decorated with <code>[DataType(DataType.Password)]</code>. No need to supply <code>type="password"</code> manually!
			</p>
		</div>
		<div class="@rowClass">
			<text-input asp-for="PasswordMatch"
			            type="password"/>
			<p>
				Alternatively, if you don't decorate the model property with <code>[DataType(DataType.Password)]</code>, you can still pass <code>type="password"</code> and it will work as expected.
			</p>
		</div>
		<div class="@rowClass">
			<text-input asp-for="Age"/>
			<p>
				Other data types such as <code>int</code> are also detected automatically, and the appropriate input type is rendered according to the built-in ASP.NET logic.
			</p>
		</div>

		<div class="column is-full">
			<h2 class="is-size-3">&lt;select-input&gt;</h2>
		</div>

		<div class="@rowClass">
			<select-input asp-for="PageUrl"
			              asp-items="Model.SocialMediaPlatforms"/>
			<p>
				You can render an array of <code>SelectListItem</code> within a &lt;select-input&gt; just like with the &lt;select&gt; tag helper.
			</p>
		</div>

		<div class="@rowClass">
			<select-input asp-for="Height">
				<option value="">Select an approximate height range</option>
				@foreach (var val in new[] { 48, 54, 60, 66, 72, 78, 84, 90, 96 })
				{
					<option value="@val"
					        selected="@(val == Model.Height)">@val inches</option>
				}
			</select-input>
			<p>
				You can also render &lt;option&gt; elements as children of the &lt;select-input&gt;.
			</p>
		</div>

		<div class="column is-full">
			<h2 class="is-size-3">&lt;text-area-input&gt;</h2>
		</div>

		<div class="column is-full">
			<text-area-input asp-for="Biography"
			                 style="height:200px;"/>
			<p>
				As with other RazorForms tag helpers, you can pass arbitrary attributes to the &lt;text-area-input&gt; tag helper. In this case, the height is set using <code>style="height:200px"</code>.
			</p>
		</div>

		<div class="column is-full">
			<h2 class="is-size-3">&lt;check-input-group&gt; and &lt;check-input&gt;</h2>
		</div>

		<div class="@rowClass">
			<check-input-group asp-for="Interests">
				<check-input asp-for="Interests"
				             value="coding"/>
				<check-input asp-for="Interests"
				             value="hiking"/>
				<check-input asp-for="Interests"
				             value="reading"/>
				<check-input asp-for="Interests"
				             value="drawing"/>
				<check-input asp-for="Interests"
				             value="sports"/>
				<check-input asp-for="Interests"
				             value="boating"/>
			</check-input-group>
			<p>
				A &lt;check-input-group&gt; creates a validity context around a group of checkboxes, so it will display errors if the associated model property fails validation.
			</p>
			<p class="has-text-info">
				As you can see, each &lt;check-input&gt; has the same text. This is because of how RazorForms automatically determines the label text for inputs. The only way to customize the text for individual checkbox inputs in a list is to <a asp-area="" asp-page="/Bootstrap/HtmlExamples">pass HTML content to the label</a>.
			</p>
		</div>
		<div class="@rowClass">
			<check-input-group asp-for="Numbers">
				<check-input asp-for="Numbers"
				             value="1"/>
				<check-input asp-for="Numbers"
				             value="2"/>
				<check-input asp-for="Numbers"
				             value="3"/>
				<check-input asp-for="Numbers"
				             value="4"/>
				<check-input asp-for="Numbers"
				             value="5"/>
				<check-input asp-for="Numbers"
				             value="6"/>
			</check-input-group>
			<p>
				&lt;check-input&gt; also works with numeric types. RazorForms uses the built-in input tag helper under the hood, so any type that can be used with a checkbox should work with &lt;check-input&gt;.
			</p>
		</div>

		<div class="column is-full">
			<h2 class="is-size-3">&lt;radio-input-group&gt; and &lt;radio-input&gt;</h2>
		</div>

		<div class="@rowClass">
			<radio-input-group asp-for="Series">
				<radio-input asp-for="Series"
				             value="Lord of the Rings"/>
				<radio-input asp-for="Series"
				             value="The Wheel of Time"/>
				<radio-input asp-for="Series"
				             value="Harry Potter"/>
			</radio-input-group>
			<p>
				&lt;radio-input-group&gt; and &lt;radio-input&gt; work essentially the same as &lt;check-input[-group]&gt;, with one difference: the associated model property can't be a list because only one item can be checked at once.
			</p>
			<p class="has-text-info">
				As you can see, each &lt;radio-input&gt; has the same text. This is because of how RazorForms automatically determines the label text for inputs. The only way to customize the text for individual radio inputs in a list is to <a asp-area="" asp-page="/Bootstrap/HtmlExamples">pass HTML content to the label</a>.
			</p>
		</div>
		<div class="@rowClass">
			<radio-input-group asp-for="Number">
				<radio-input asp-for="Number"
				             value="3"/>
				<radio-input asp-for="Number"
				             value="7"/>
				<radio-input asp-for="Number"
				             value="13"/>
			</radio-input-group>
			<p>
				Also like &lt;check-input[-group]&gt;, &lt;radio-input[-group]&gt; can be used with numeric types.
			</p>
		</div>

		<div class="column is-full">
			<h2 class="is-size-3">Standalone &lt;check-input&gt;</h2>
		</div>

		<div class="@rowClass">
			<check-input asp-for="WantsMarketingEmails"/>
			<check-input asp-for="AcceptTos"/>
			<p>
				A standalone &lt;check-input&gt; can be used just fine without specifying label content because only one checkbox with that label will be created.
			</p>
		</div>

		<div class="column is-full">
			<button class="button is-primary" type="submit">Submit</button>
		</div>
	</div>
</form>