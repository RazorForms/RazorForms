@page
@model ExampleProject.Pages.Shared.AttributeExampleModel

@{
	ViewData["Title"] = "Bootstrap 5 example form with attribute-defined labels";
	const string rowClass = "col-12 col-md-6 mb-5";
	const string buttonRowClass = "col-12 col-md-4 mb-5";
}

<h1 class="display-4 text-center">@ViewData["Title"]</h1>

<p>
	This page shows how to specify label text using the <code>[Display(Name = "Some label text")]</code> technique. If you look at the markup, you'll notice there is no label text specified in the Razor code. However, if you view this page's model at <code>ExampleProject/Pages/Shared/AttributeExampleModel.cs</code>, you'll see that each model property is decorated with <code>[Display]</code>.
</p>

<form asp-page="/"
      method="post">
	<div class="row">
		<div class="col-12">
			<h2 class="display-6">&lt;text-input&gt;</h2>
		</div>
		<div class="@rowClass">
			<text-input asp-for="FirstName"
			            disabled/>
			<p>
				You can pass arbitrary attributes down to the &lt;input&gt; by adding them to the &lt;text-input&gt; tag helper. In this case, the <code>disabled</code> attribute was passed to the &lt;text-input&gt; tag helper, so the  underlying &lt;input&gt; is also disabled.
			</p>
		</div>
		<div class="@rowClass">
			<text-input asp-for="LastName"
			            class="fake-class"/>
			<p>
				The only attribute not passed to the underlying &lt;input&gt; is the <code>class</code> attribute. Classes are passed to the &lt;div&gt; wrapping the whole component output. In this case, the CSS class <code>fake-class</code> has been applied to the &lt;div&gt; wrapping the component.
			</p>
		</div>
		<div class="@rowClass">
			<text-input asp-for="Password"/>
			<p>
				Data types like passwords are automatically detected if the model property is decorated with <code>[DataType(DataType.Password)]</code>. No need to supply <code>type="password"</code> manually!
			</p>
		</div>
		<div class="@rowClass">
			<text-input asp-for="PasswordMatch"
			            type="password"/>
			<p>
				Alternatively, if you don't decorate the model property with <code>[DataType(DataType.Password)]</code>, you can still pass <code>type="password"</code> and it will work as expected.
			</p>
		</div>
		<div class="@rowClass">
			<text-input asp-for="Age"/>
			<p>
				Other data types such as <code>int</code> are also detected automatically, and the appropriate input type is rendered according to the built-in ASP.NET logic.
			</p>
		</div>

		<div class="col-12">
			<h2 class="display-6">&lt;select-input&gt;</h2>
		</div>

		<div class="@rowClass">
			<select-input asp-for="PageUrl"
			              asp-items="Model.SocialMediaPlatforms"/>
			<p>
				You can render an array of <code>SelectListItem</code> within a &lt;select-input&gt; just like with the &lt;select&gt; tag helper.
			</p>
		</div>

		<div class="@rowClass">
			<select-input asp-for="Height">
				<option value="">Select an approximate height range</option>
				@foreach (var val in new[] { 48, 54, 60, 66, 72, 78, 84, 90, 96 })
				{
					<option value="@val">@val inches</option>
				}
			</select-input>
			<p>
				You can also render &lt;option&gt; elements as children of the &lt;select-input&gt;.
			</p>
		</div>

		<div class="col-12">
			<h2 class="display-6">&lt;text-area-input&gt;</h2>
		</div>

		<div class="col-12">
			<text-area-input asp-for="Biography"
			                 style="height:200px;"/>
			<p>
				As with other RazorForms tag helpers, you can pass arbitrary attributes to the &lt;text-area-input&gt; tag helper. In this case, the height is set using <code>style="height:200px"</code>.
			</p>
		</div>

		<div class="col-12">
			<h2 class="display-6">&lt;check-input-group&gt; and &lt;check-input&gt;</h2>
		</div>

		<div class="@rowClass">
			<check-input-group asp-for="Interests">
				<check-input asp-for="Interests"
				             value="coding"/>
				<check-input asp-for="Interests"
				             value="hiking"/>
				<check-input asp-for="Interests"
				             value="reading"/>
				<check-input asp-for="Interests"
				             value="drawing"/>
				<check-input asp-for="Interests"
				             value="sports"/>
				<check-input asp-for="Interests"
				             value="boating"/>
			</check-input-group>
			<p>
				A &lt;check-input-group&gt; creates a validity context around a group of checkboxes, so it will display errors if the associated model property fails validation. As you can see, each &lt;check-input&gt; has the same text. This is because of how RazorForms automatically determines the label text for inputs.
			</p>
			<p class="text-info">
				As you can see, now the &lt;check-input-group&gt; has the correct label, but <em>all</em> of its inputs have the same label! This is because individual &lt;check-input&gt; elements still use the name of the model property or its <code>[Display]</code>. The only way to customize the text for individual checkbox inputs in a list is to <a asp-area="" asp-page="/Bootstrap/HtmlExamples">pass HTML content to the label</a>. 
			</p>
		</div>
		<div class="@rowClass">
			<check-input-group asp-for="Numbers">
				<check-input asp-for="Numbers"
				             value="1"/>
				<check-input asp-for="Numbers"
				             value="2"/>
				<check-input asp-for="Numbers"
				             value="3"/>
				<check-input asp-for="Numbers"
				             value="4"/>
				<check-input asp-for="Numbers"
				             value="5"/>
				<check-input asp-for="Numbers"
				             value="6"/>
			</check-input-group>
			<p>
				&lt;check-input&gt; also works with numeric types. RazorForms uses the built-in input tag helper under the hood, so any type that can be used with a checkbox should work with &lt;check-input&gt;.
			</p>
		</div>

		<div class="col-12">
			<h2 class="display-6">&lt;radio-input-group&gt; and &lt;radio-input&gt;</h2>
		</div>

		<div class="@rowClass">
			<radio-input-group asp-for="Series">
				<radio-input asp-for="Series"
				             value="Lord of the Rings"/>
				<radio-input asp-for="Series"
				             value="The Wheel of Time"/>
				<radio-input asp-for="Series"
				             value="Harry Potter"/>
			</radio-input-group>
			<p>
				&lt;radio-input-group&gt; and &lt;radio-input&gt; work essentially the same as &lt;check-input[-group]&gt;, with one difference: the associated model property can't be a list because only one item can be checked at once.
			</p>
			<p class="text-info">
				As you can see, now the &lt;radio-input-group&gt; has the correct label, but <em>all</em> of its inputs have the same label! This is because individual &lt;radio-input&gt; elements still use the name of the model property or its <code>[Display]</code>. The only way to customize the text for individual radio inputs in a list is to <a asp-area="" asp-page="/Bootstrap/HtmlExamples">pass HTML content to the label</a>. 
			</p>
		</div>
		<div class="@rowClass">
			<radio-input-group asp-for="Number">
				<radio-input asp-for="Number"
				             value="3"/>
				<radio-input asp-for="Number"
				             value="7"/>
				<radio-input asp-for="Number"
				             value="13"/>
			</radio-input-group>
			<p>
				Also like &lt;check-input[-group]&gt;, &lt;radio-input[-group]&gt; can be used with numeric types.
			</p>
		</div>

		<div class="col-12">
			<h2 class="display-6">Standalone &lt;check-input&gt;</h2>
		</div>

		<div class="@rowClass">
			<check-input asp-for="WantsMarketingEmails"/>
			<check-input asp-for="AcceptTos"/>
			<p>
				A standalone &lt;check-input&gt; can be used just fine without specifying label content because only one checkbox with that label will be created.
			</p>
			<p class="text-info">
				Because these are standalone &lt;check-input&gt; tags, the associated labels have the text you would expect. The only drawback is that you can't supply HTML to the label. For example, if you wanted to provide a link to the terms of service, you would either need to do so outside the &lt;check-input&gt; or <a asp-area="" asp-page="/Bootstrap/HtmlExamples">pass HTML content to the label</a>.
			</p>
		</div>

		<div class="col-12">
			<h2 class="display-6">&lt;submit-button&gt;, &lt;reset-button&gt;, and &lt;default-button&gt;</h2>
		</div>

		<div class="@buttonRowClass">
			<submit-button>Submit</submit-button>
			<p>
				The RazorForms button tag helpers render less HTML than other RazorForms tag helpers. The only markup rendered is the &lt;button&gt; element, its associated classes, and any arbitrary attributes passed into the tag helper. The child content of the button tag helpers is rendered as the child content of the generated &lt;button&gt;.
			</p>
		</div>

		<div class="@buttonRowClass">
			<reset-button class="custom-button">Reset</reset-button>
			<p>
				Like with other tag helpers, you can pass arbitrary classes into the button tag helpers. Unlike other tag helpers, however, classes passed in are rendered on the &lt;button&gt; and not the component wrapper, even if the component wrapper is enabled.
			</p>
		</div>

		<div class="@buttonRowClass">
			<default-button disabled>Just a button</default-button>
			<p>
				Like with other tag helpers, you can pass arbitrary attributres into the button tag helpers. In this case, the <code>disabled</code> attribute was passed into the button tag helper, and it was rendered directly on the &lt;button&gt;.
			</p>
		</div>
	</div>
</form>